version: '3'

tasks:
  dp:
    desc: Build the mailos binary locally
    cmds:
      - task publish-patch

  build:
    desc: Build the mailos binary locally
    cmds:
      - go build -o mailos cmd/mailos/main.go

  install:
    desc: Install mailos globally
    cmds:
      - go install ./cmd/mailos
      - echo "âœ“ Installed mailos to $(go env GOPATH)/bin/mailos"

  update:
    desc: Build and install mailos globally
    cmds:
      - task: install

  test:
    desc: Run tests
    cmds:
      - go test ./...

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -f mailos
      - go clean

  dev:
    desc: Build and run locally
    cmds:
      - task: build
      - ./mailos {{.CLI_ARGS}}

  uninstall:
    desc: Uninstall mailos from global installation
    cmds:
      - rm -f $(go env GOPATH)/bin/mailos
      - echo "âœ“ Uninstalled mailos"

  npm-pack:
    desc: Build npm package for distribution
    dir: npm
    cmds:
      - npm pack
      - echo "âœ“ NPM package created in npm/"

  npm-publish:
    desc: Publish to npm registry
    dir: npm
    cmds:
      - npm publish
      - echo "âœ“ Published to npm registry"

  release:
    desc: Build binaries for all platforms
    cmds:
      - mkdir -p dist
      - GOOS=darwin GOARCH=amd64 go build -o dist/mailos-darwin-amd64 cmd/mailos/main.go
      - GOOS=darwin GOARCH=arm64 go build -o dist/mailos-darwin-arm64 cmd/mailos/main.go
      - GOOS=linux GOARCH=amd64 go build -o dist/mailos-linux-amd64 cmd/mailos/main.go
      - GOOS=linux GOARCH=arm64 go build -o dist/mailos-linux-arm64 cmd/mailos/main.go
      - GOOS=windows GOARCH=amd64 go build -o dist/mailos-windows-amd64.exe cmd/mailos/main.go
      - echo "âœ“ Release binaries created in dist/"

  publish-patch:
    desc: Bump patch version and publish to all providers (npm, Homebrew, GitHub)
    cmds:
      - echo "ðŸ“¦ Starting patch release process..."
      # Get current version from npm package
      - |
        cd npm && \
        CURRENT_VERSION=$(node -p "require('./package.json').version") && \
        echo "Current version: v$CURRENT_VERSION" && \
        npm version patch --no-git-tag-version && \
        NEW_VERSION=$(node -p "require('./package.json').version") && \
        echo "New version: v$NEW_VERSION" && \
        cd ..
      # Update Homebrew formula placeholder
      - |
        NEW_VERSION=$(cd npm && node -p "require('./package.json').version") && \
        sed -i.bak "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/v$NEW_VERSION/g" Formula/mailos.rb && \
        rm Formula/mailos.rb.bak
      # Commit version changes
      - |
        NEW_VERSION=$(cd npm && node -p "require('./package.json').version") && \
        git add npm/package.json Formula/mailos.rb && \
        git commit -m "Release v$NEW_VERSION" || true
      # Create and push tag
      - |
        NEW_VERSION=$(cd npm && node -p "require('./package.json').version") && \
        git tag "v$NEW_VERSION" && \
        echo "âœ… Tagged version v$NEW_VERSION"
      # Push to GitHub (this triggers the release workflow)
      - |
        echo "ðŸš€ Pushing to GitHub..." && \
        git push && \
        git push --tags
      - |
        NEW_VERSION=$(cd npm && node -p "require('./package.json').version") && \
        echo "âœ… Release v$NEW_VERSION initiated!" && \
        echo "" && \
        echo "ðŸ“‹ The GitHub Actions workflow will now:" && \
        echo "  â€¢ Build binaries for all platforms" && \
        echo "  â€¢ Create a GitHub release" && \
        echo "  â€¢ Publish to npm registry" && \
        echo "  â€¢ Update Homebrew formula" && \
        echo "" && \
        echo "Monitor progress at: https://github.com/emailos/mailos/actions"

  publish-minor:
    desc: Bump minor version and publish to all providers
    cmds:
      - echo "ðŸ“¦ Starting minor release process..."
      - |
        cd npm && \
        npm version minor --no-git-tag-version && \
        NEW_VERSION=$(node -p "require('./package.json').version") && \
        cd .. && \
        sed -i.bak "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/v$NEW_VERSION/g" Formula/mailos.rb && \
        rm Formula/mailos.rb.bak && \
        git add npm/package.json Formula/mailos.rb && \
        git commit -m "Release v$NEW_VERSION" && \
        git tag "v$NEW_VERSION" && \
        git push && git push --tags && \
        echo "âœ… Minor release v$NEW_VERSION published!"

  publish-major:
    desc: Bump major version and publish to all providers
    cmds:
      - echo "ðŸ“¦ Starting major release process..."
      - |
        cd npm && \
        npm version major --no-git-tag-version && \
        NEW_VERSION=$(node -p "require('./package.json').version") && \
        cd .. && \
        sed -i.bak "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/v$NEW_VERSION/g" Formula/mailos.rb && \
        rm Formula/mailos.rb.bak && \
        git add npm/package.json Formula/mailos.rb && \
        git commit -m "Release v$NEW_VERSION" && \
        git tag "v$NEW_VERSION" && \
        git push && git push --tags && \
        echo "âœ… Major release v$NEW_VERSION published!"

  version:
    desc: Show current version
    cmds:
      - |
        echo "Current version: v$(cd npm && node -p "require('./package.json').version")"

  readme:
    desc: Copy README.md to web folder for documentation access
    cmds:
      - cp README.md web/
      - echo "âœ“ README.md copied to web folder"

  default:
    desc: Show available tasks
    cmds:
      - task --list