name: MCP Server Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.24.x']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
          ~/Library/Caches/go-build
          %LocalAppData%\go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Build MCP server
      run: go build -v -o emailos-mcp ./...
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
    
    - name: Run vet
      run: go vet ./...
    
    - name: Install staticcheck
      run: go install honnef.co/go/tools/cmd/staticcheck@latest
    
    - name: Run staticcheck
      run: staticcheck ./...
    
    - name: Test MCP server initialization
      run: |
        ./emailos-mcp --version || true
        ./emailos-mcp --help || true
    
    - name: Upload coverage reports
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.txt
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: emailos-mcp-${{ matrix.os }}
        path: emailos-mcp*
        retention-days: 7

  mcp-integration-test:
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'
    
    - name: Build MCP server
      run: go build -v -o emailos-mcp ./...
    
    - name: Create test configuration
      run: |
        cat > test-mcp-config.json <<EOF
        {
          "mcpServers": {
            "emailos": {
              "command": "./emailos-mcp",
              "args": ["--mcp-server"],
              "env": {
                "EMAILOS_TEST_MODE": "true"
              }
            }
          }
        }
        EOF
    
    - name: Test MCP server stdio communication
      run: |
        echo '{"jsonrpc":"2.0","method":"initialize","params":{"protocolVersion":"1.0.0","capabilities":{}},"id":1}' | timeout 5s ./emailos-mcp --mcp-server || true
    
    - name: Validate MCP server response format
      run: |
        response=$(echo '{"jsonrpc":"2.0","method":"initialize","params":{"protocolVersion":"1.0.0","capabilities":{}},"id":1}' | timeout 5s ./emailos-mcp --mcp-server 2>/dev/null || true)
        if echo "$response" | grep -q "jsonrpc"; then
          echo "MCP server responds with valid JSON-RPC format"
        else
          echo "Warning: MCP server may not be responding correctly"
        fi